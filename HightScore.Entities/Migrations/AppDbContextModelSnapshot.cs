// <auto-generated />
using System;
using HightScore.Entities.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HightScore.Entities.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryDescription = "Games that emphasize physical challenges, including hand-eye coordination and reaction-time.",
                            CategoryName = "Action"
                        },
                        new
                        {
                            Id = 2,
                            CategoryDescription = "Narrative-focused games that often involve exploration and puzzle-solving.",
                            CategoryName = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            CategoryDescription = "Games that allow players to assume the roles of characters in a fictional setting.",
                            CategoryName = "Role-Playing"
                        },
                        new
                        {
                            Id = 4,
                            CategoryDescription = "Games that require careful planning and decision-making.",
                            CategoryName = "Strategy"
                        },
                        new
                        {
                            Id = 5,
                            CategoryDescription = "Games that replicate real-world activities or systems.",
                            CategoryName = "Simulation"
                        },
                        new
                        {
                            Id = 6,
                            CategoryDescription = "Games based on real or fictional sports.",
                            CategoryName = "Sports"
                        },
                        new
                        {
                            Id = 7,
                            CategoryDescription = "Games centered around competitive or non-competitive racing.",
                            CategoryName = "Racing"
                        },
                        new
                        {
                            Id = 8,
                            CategoryDescription = "Games focused on hand-to-hand combat between characters.",
                            CategoryName = "Fighting"
                        },
                        new
                        {
                            Id = 9,
                            CategoryDescription = "Games designed to scare or unsettle players.",
                            CategoryName = "Horror"
                        },
                        new
                        {
                            Id = 10,
                            CategoryDescription = "Games that challenge problem-solving skills.",
                            CategoryName = "Puzzle"
                        },
                        new
                        {
                            Id = 11,
                            CategoryDescription = "Games characterized by jumping between platforms and overcoming obstacles.",
                            CategoryName = "Platformer"
                        },
                        new
                        {
                            Id = 12,
                            CategoryDescription = "Games focused on shooting enemies or targets.",
                            CategoryName = "Shooter"
                        },
                        new
                        {
                            Id = 13,
                            CategoryDescription = "Games where the player must survive in a hostile environment.",
                            CategoryName = "Survival"
                        },
                        new
                        {
                            Id = 14,
                            CategoryDescription = "Games that allow players to roam freely through a virtual world.",
                            CategoryName = "Open World"
                        },
                        new
                        {
                            Id = 15,
                            CategoryDescription = "Massively multiplayer online role-playing games.",
                            CategoryName = "MMORPG"
                        },
                        new
                        {
                            Id = 16,
                            CategoryDescription = "Games designed for cooperative multiplayer gameplay.",
                            CategoryName = "Co-op"
                        },
                        new
                        {
                            Id = 17,
                            CategoryDescription = "Games where players take turns to make decisions or moves.",
                            CategoryName = "Turn-Based"
                        },
                        new
                        {
                            Id = 18,
                            CategoryDescription = "Strategy games where players make decisions in real-time.",
                            CategoryName = "Real-Time Strategy"
                        },
                        new
                        {
                            Id = 19,
                            CategoryDescription = "Games that emphasize careful planning and tactical decision-making.",
                            CategoryName = "Tactical"
                        },
                        new
                        {
                            Id = 20,
                            CategoryDescription = "Games designed to teach players about a specific subject or skill.",
                            CategoryName = "Educational"
                        },
                        new
                        {
                            Id = 21,
                            CategoryDescription = "Games focused on creating or performing music.",
                            CategoryName = "Music"
                        },
                        new
                        {
                            Id = 22,
                            CategoryDescription = "Games that are easy to learn and play.",
                            CategoryName = "Casual"
                        },
                        new
                        {
                            Id = 23,
                            CategoryDescription = "Games that prioritize artistic expression or creativity.",
                            CategoryName = "Artistic"
                        },
                        new
                        {
                            Id = 24,
                            CategoryDescription = "Games set in or inspired by historical events or periods.",
                            CategoryName = "Historical"
                        },
                        new
                        {
                            Id = 25,
                            CategoryDescription = "Games set in fantastical or mythical worlds.",
                            CategoryName = "Fantasy"
                        },
                        new
                        {
                            Id = 26,
                            CategoryDescription = "Games set in futuristic or science fiction settings.",
                            CategoryName = "Sci-Fi"
                        },
                        new
                        {
                            Id = 27,
                            CategoryDescription = "Games that feature a dystopian future with advanced technology.",
                            CategoryName = "Cyberpunk"
                        },
                        new
                        {
                            Id = 28,
                            CategoryDescription = "Games that require players to avoid detection and complete objectives stealthily.",
                            CategoryName = "Stealth"
                        },
                        new
                        {
                            Id = 29,
                            CategoryDescription = "Games characterized by narrative-driven storytelling and minimal gameplay.",
                            CategoryName = "Visual Novel"
                        },
                        new
                        {
                            Id = 30,
                            CategoryDescription = "Games that focus on romantic relationships and dating.",
                            CategoryName = "Dating Sim"
                        },
                        new
                        {
                            Id = 31,
                            CategoryDescription = "Games designed to be experienced in virtual reality environments.",
                            CategoryName = "Virtual Reality"
                        },
                        new
                        {
                            Id = 32,
                            CategoryDescription = "Games that blend virtual elements with real-world environments.",
                            CategoryName = "Augmented Reality"
                        },
                        new
                        {
                            Id = 33,
                            CategoryDescription = "Games focused on exploring dungeons and defeating enemies.",
                            CategoryName = "Dungeon Crawler"
                        },
                        new
                        {
                            Id = 34,
                            CategoryDescription = "Games where players defend against waves of enemies using strategic placements.",
                            CategoryName = "Tower Defense"
                        },
                        new
                        {
                            Id = 35,
                            CategoryDescription = "Games where progress is made even when the player is not actively playing.",
                            CategoryName = "Idle"
                        },
                        new
                        {
                            Id = 36,
                            CategoryDescription = "Games where players gradually increase resources or abilities over time.",
                            CategoryName = "Incremental"
                        },
                        new
                        {
                            Id = 37,
                            CategoryDescription = "Games where players compete to be the last one standing in a shrinking play area.",
                            CategoryName = "Battle Royale"
                        },
                        new
                        {
                            Id = 38,
                            CategoryDescription = "Games designed for multiplayer parties or gatherings.",
                            CategoryName = "Party"
                        },
                        new
                        {
                            Id = 39,
                            CategoryDescription = "Games that involve managing resources, businesses, or scenarios.",
                            CategoryName = "Management"
                        },
                        new
                        {
                            Id = 40,
                            CategoryDescription = "Games focused on humor and comedic situations.",
                            CategoryName = "Comedy"
                        },
                        new
                        {
                            Id = 41,
                            CategoryDescription = "Games that involve solving puzzles or uncovering secrets.",
                            CategoryName = "Mystery"
                        },
                        new
                        {
                            Id = 42,
                            CategoryDescription = "Games focused on exploring vast environments or uncovering mysteries.",
                            CategoryName = "Exploration"
                        },
                        new
                        {
                            Id = 43,
                            CategoryDescription = "Games that explore the capabilities and implications of artificial intelligence.",
                            CategoryName = "Artificial Intelligence"
                        },
                        new
                        {
                            Id = 44,
                            CategoryDescription = "Games that emphasize environmental themes or challenges.",
                            CategoryName = "Environmental"
                        },
                        new
                        {
                            Id = 45,
                            CategoryDescription = "Games that involve creating or crafting items or structures.",
                            CategoryName = "Crafting"
                        },
                        new
                        {
                            Id = 46,
                            CategoryDescription = "Games designed for social interaction and communication.",
                            CategoryName = "Social"
                        },
                        new
                        {
                            Id = 47,
                            CategoryDescription = "Games that blend historical events with fictional elements.",
                            CategoryName = "Historical Fiction"
                        },
                        new
                        {
                            Id = 48,
                            CategoryDescription = "Games that explore psychological themes or challenges.",
                            CategoryName = "Psychological"
                        },
                        new
                        {
                            Id = 49,
                            CategoryDescription = "Games focused on criminal activities or investigations.",
                            CategoryName = "Crime"
                        },
                        new
                        {
                            Id = 50,
                            CategoryDescription = "Games set in outer space or involving space exploration.",
                            CategoryName = "Space"
                        });
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("varchar(800)");

                    b.Property<decimal>("MediaAverageRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RelaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("UserAverageRating")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "An action-adventure game developed and published by Nintendo.",
                            MediaAverageRating = 9.8m,
                            RelaseDate = new DateTime(2017, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Legend of Zelda: Breath of the Wild",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4147),
                            UserAverageRating = 9.5m
                        },
                        new
                        {
                            Id = 2,
                            Description = "A platform game developed and published by Nintendo for the Nintendo Switch.",
                            MediaAverageRating = 9.7m,
                            RelaseDate = new DateTime(2017, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Super Mario Odyssey",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4164),
                            UserAverageRating = 9.3m
                        },
                        new
                        {
                            Id = 3,
                            Description = "An action-adventure game developed and published by Rockstar Games.",
                            MediaAverageRating = 9.8m,
                            RelaseDate = new DateTime(2018, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Red Dead Redemption 2",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4167),
                            UserAverageRating = 9.6m
                        },
                        new
                        {
                            Id = 4,
                            Description = "An action-adventure game developed by Santa Monica Studio and published by Sony Interactive Entertainment.",
                            MediaAverageRating = 9.6m,
                            RelaseDate = new DateTime(2018, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "God of War",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4170),
                            UserAverageRating = 9.4m
                        },
                        new
                        {
                            Id = 5,
                            Description = "An action role-playing game developed and published by CD Projekt.",
                            MediaAverageRating = 9.9m,
                            RelaseDate = new DateTime(2015, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Witcher 3: Wild Hunt",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4172),
                            UserAverageRating = 9.7m
                        },
                        new
                        {
                            Id = 6,
                            Description = "An action role-playing game developed and published by CD Projekt.",
                            MediaAverageRating = 8.9m,
                            RelaseDate = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Cyberpunk 2077",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4176),
                            UserAverageRating = 8.5m
                        },
                        new
                        {
                            Id = 7,
                            Description = "A sandbox video game developed by Mojang.",
                            MediaAverageRating = 9.5m,
                            RelaseDate = new DateTime(2011, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Minecraft",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4179),
                            UserAverageRating = 9.2m
                        },
                        new
                        {
                            Id = 8,
                            Description = "An online video game developed by Epic Games.",
                            MediaAverageRating = 9.0m,
                            RelaseDate = new DateTime(2017, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Fortnite",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4181),
                            UserAverageRating = 8.8m
                        },
                        new
                        {
                            Id = 9,
                            Description = "An action role-playing game developed by Bethesda Game Studios and published by Bethesda Softworks.",
                            MediaAverageRating = 9.7m,
                            RelaseDate = new DateTime(2011, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Elder Scrolls V: Skyrim",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4185),
                            UserAverageRating = 9.4m
                        },
                        new
                        {
                            Id = 10,
                            Description = "An action role-playing game developed by Guerrilla Games and published by Sony Interactive Entertainment.",
                            MediaAverageRating = 9.5m,
                            RelaseDate = new DateTime(2017, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Horizon Zero Dawn",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4188),
                            UserAverageRating = 9.3m
                        },
                        new
                        {
                            Id = 11,
                            Description = "An action role-playing game developed and published by Square Enix.",
                            MediaAverageRating = 8.8m,
                            RelaseDate = new DateTime(2016, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Final Fantasy XV",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4190),
                            UserAverageRating = 8.6m
                        },
                        new
                        {
                            Id = 12,
                            Description = "A role-playing video game developed by Atlus.",
                            MediaAverageRating = 9.6m,
                            RelaseDate = new DateTime(2016, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Persona 5",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4193),
                            UserAverageRating = 9.5m
                        },
                        new
                        {
                            Id = 13,
                            Description = "An action role-playing game developed by FromSoftware and published by Bandai Namco Entertainment.",
                            MediaAverageRating = 9.3m,
                            RelaseDate = new DateTime(2016, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Dark Souls III",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4195),
                            UserAverageRating = 9.1m
                        },
                        new
                        {
                            Id = 14,
                            Description = "An action role-playing game developed by FromSoftware and published by Sony Computer Entertainment.",
                            MediaAverageRating = 9.4m,
                            RelaseDate = new DateTime(2015, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Bloodborne",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4202),
                            UserAverageRating = 9.3m
                        },
                        new
                        {
                            Id = 15,
                            Description = "A team-based multiplayer first-person shooter developed and published by Blizzard Entertainment.",
                            MediaAverageRating = 9.1m,
                            RelaseDate = new DateTime(2016, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Overwatch",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4204),
                            UserAverageRating = 8.9m
                        },
                        new
                        {
                            Id = 16,
                            Description = "An action-adventure game developed by FromSoftware and published by Activision.",
                            MediaAverageRating = 9.5m,
                            RelaseDate = new DateTime(2019, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Sekiro: Shadows Die Twice",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4207),
                            UserAverageRating = 9.2m
                        },
                        new
                        {
                            Id = 17,
                            Description = "An action role-playing game developed by Team Ninja and published by Koei Tecmo.",
                            MediaAverageRating = 8.9m,
                            RelaseDate = new DateTime(2017, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Nioh",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4209),
                            UserAverageRating = 8.7m
                        },
                        new
                        {
                            Id = 18,
                            Description = "An action role-playing game developed and published by Capcom.",
                            MediaAverageRating = 9.2m,
                            RelaseDate = new DateTime(2018, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Monster Hunter: World",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4211),
                            UserAverageRating = 9.0m
                        },
                        new
                        {
                            Id = 19,
                            Description = "A survival horror game developed and published by Capcom.",
                            MediaAverageRating = 9.5m,
                            RelaseDate = new DateTime(2019, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Resident Evil 2",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4213),
                            UserAverageRating = 9.3m
                        },
                        new
                        {
                            Id = 20,
                            Description = "An action-adventure game developed by Sucker Punch Productions and published by Sony Interactive Entertainment.",
                            MediaAverageRating = 9.5m,
                            RelaseDate = new DateTime(2020, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Ghost of Tsushima",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4216),
                            UserAverageRating = 9.4m
                        },
                        new
                        {
                            Id = 21,
                            Description = "An action role-playing video game developed by Ubisoft Montreal and published by Ubisoft.",
                            MediaAverageRating = 9.0m,
                            RelaseDate = new DateTime(2020, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Assassin's Creed Valhalla",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4218),
                            UserAverageRating = 8.8m
                        },
                        new
                        {
                            Id = 22,
                            Description = "An action-adventure game developed by Naughty Dog and published by Sony Interactive Entertainment.",
                            MediaAverageRating = 9.8m,
                            RelaseDate = new DateTime(2020, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Last of Us Part II",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4233),
                            UserAverageRating = 9.6m
                        },
                        new
                        {
                            Id = 23,
                            Description = "An action-adventure game developed by Remedy Entertainment and published by 505 Games.",
                            MediaAverageRating = 9.1m,
                            RelaseDate = new DateTime(2019, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Control",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4236),
                            UserAverageRating = 8.9m
                        },
                        new
                        {
                            Id = 24,
                            Description = "A roguelike action dungeon crawler video game developed and published by Supergiant Games.",
                            MediaAverageRating = 9.7m,
                            RelaseDate = new DateTime(2020, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Hades",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4238),
                            UserAverageRating = 9.5m
                        },
                        new
                        {
                            Id = 25,
                            Description = "A first-person shooter game developed by id Software and published by Bethesda Softworks.",
                            MediaAverageRating = 9.3m,
                            RelaseDate = new DateTime(2020, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Doom Eternal",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4240),
                            UserAverageRating = 9.1m
                        },
                        new
                        {
                            Id = 26,
                            Description = "An action role-playing game developed and published by miHoYo.",
                            MediaAverageRating = 8.8m,
                            RelaseDate = new DateTime(2020, 9, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Genshin Impact",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4242),
                            UserAverageRating = 8.6m
                        },
                        new
                        {
                            Id = 27,
                            Description = "An action game developed by Kojima Productions and published by Sony Interactive Entertainment.",
                            MediaAverageRating = 8.9m,
                            RelaseDate = new DateTime(2019, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Death Stranding",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4244),
                            UserAverageRating = 8.7m
                        },
                        new
                        {
                            Id = 28,
                            Description = "An action-adventure game developed by Insomniac Games and published by Sony Interactive Entertainment.",
                            MediaAverageRating = 9.3m,
                            RelaseDate = new DateTime(2018, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Marvel's Spider-Man",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4246),
                            UserAverageRating = 9.2m
                        },
                        new
                        {
                            Id = 29,
                            Description = "A virtual reality first-person shooter developed and published by Valve.",
                            MediaAverageRating = 9.6m,
                            RelaseDate = new DateTime(2020, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Half-Life: Alyx",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4248),
                            UserAverageRating = 9.4m
                        },
                        new
                        {
                            Id = 30,
                            Description = "An action role-playing game developed and published by TaleWorlds Entertainment. Bannerlord is a prequel to Mount & Blade: Warband, a stand-alone expansion pack for the 2008 game Mount & Blade.",
                            MediaAverageRating = 8.7m,
                            RelaseDate = new DateTime(2020, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Mount and Blade II: Bannerlord",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4250),
                            UserAverageRating = 8.5m
                        },
                        new
                        {
                            Id = 31,
                            Description = "Explore the depths of Arkham Asylum as Batman, unraveling a sinister plot orchestrated by his arch-nemesis, the Joker.",
                            MediaAverageRating = 9.2m,
                            RelaseDate = new DateTime(2009, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Batman: Arkham Asylum",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4253),
                            UserAverageRating = 9.0m
                        },
                        new
                        {
                            Id = 32,
                            Description = "Gotham City is transformed into a sprawling prison, and Batman must navigate its dangerous streets to uncover a new threat.",
                            MediaAverageRating = 9.3m,
                            RelaseDate = new DateTime(2011, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Batman: Arkham City",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4255),
                            UserAverageRating = 9.1m
                        },
                        new
                        {
                            Id = 33,
                            Description = "The Dark Knight faces the ultimate threat to Gotham City as the Scarecrow unites Batman's foes to destroy him once and for all.",
                            MediaAverageRating = 9.0m,
                            RelaseDate = new DateTime(2015, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Batman: Arkham Knight",
                            UpdatedAt = new DateTime(2024, 7, 15, 21, 10, 36, 769, DateTimeKind.Local).AddTicks(4257),
                            UserAverageRating = 8.9m
                        });
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.ItemCategory", b =>
                {
                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("itemId", "categoryId");

                    b.HasIndex("categoryId");

                    b.ToTable("ItemCategories");

                    b.HasData(
                        new
                        {
                            itemId = 1,
                            categoryId = 1,
                            Id = 1
                        },
                        new
                        {
                            itemId = 1,
                            categoryId = 2,
                            Id = 2
                        },
                        new
                        {
                            itemId = 6,
                            categoryId = 1,
                            Id = 3
                        },
                        new
                        {
                            itemId = 6,
                            categoryId = 2,
                            Id = 4
                        },
                        new
                        {
                            itemId = 6,
                            categoryId = 3,
                            Id = 5
                        },
                        new
                        {
                            itemId = 6,
                            categoryId = 14,
                            Id = 6
                        });
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.ItemPlatform", b =>
                {
                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<int>("platformId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("itemId", "platformId");

                    b.HasIndex("platformId");

                    b.ToTable("ItemPlatforms");

                    b.HasData(
                        new
                        {
                            itemId = 1,
                            platformId = 3,
                            Id = 1
                        },
                        new
                        {
                            itemId = 1,
                            platformId = 11,
                            Id = 2
                        },
                        new
                        {
                            itemId = 6,
                            platformId = 1,
                            Id = 3
                        },
                        new
                        {
                            itemId = 6,
                            platformId = 2,
                            Id = 4
                        },
                        new
                        {
                            itemId = 6,
                            platformId = 4,
                            Id = 5
                        },
                        new
                        {
                            itemId = 6,
                            platformId = 5,
                            Id = 6
                        },
                        new
                        {
                            itemId = 6,
                            platformId = 6,
                            Id = 7
                        });
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("Fax")
                        .HasColumnType("longtext");

                    b.Property<byte?>("MediaLogo")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("MediaName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TaxIdNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MediaName")
                        .IsUnique();

                    b.HasIndex("TaxIdNumber")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("phone")
                        .IsUnique();

                    b.ToTable("Medias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "San Francisco",
                            Country = "USA",
                            Email = "contact@ign.com",
                            Fax = "123-456-7891",
                            MediaName = "IGN",
                            Password = "password123",
                            TaxIdNumber = "123456789",
                            UserName = "ign_user",
                            phone = "123-456-7890"
                        },
                        new
                        {
                            Id = 2,
                            City = "New York",
                            Country = "USA",
                            Email = "contact@gamespot.com",
                            Fax = "987-654-3211",
                            MediaName = "GameSpot",
                            Password = "password456",
                            TaxIdNumber = "987654321",
                            UserName = "gamespot_user",
                            phone = "987-654-3210"
                        },
                        new
                        {
                            Id = 3,
                            City = "Atlanta",
                            Country = "USA",
                            Email = "contact@polygon.com",
                            Fax = "456-789-1231",
                            MediaName = "Polygon",
                            Password = "password789",
                            TaxIdNumber = "456789123",
                            UserName = "polygon_user",
                            phone = "456-789-1230"
                        },
                        new
                        {
                            Id = 4,
                            City = "Los Angeles",
                            Country = "USA",
                            Email = "contact@kotaku.com",
                            Fax = "654-321-9871",
                            MediaName = "Kotaku",
                            Password = "password321",
                            TaxIdNumber = "654321987",
                            UserName = "kotaku_user",
                            phone = "654-321-9870"
                        },
                        new
                        {
                            Id = 5,
                            City = "Brighton",
                            Country = "UK",
                            Email = "contact@eurogamer.net",
                            Fax = "321-987-6541",
                            MediaName = "Eurogamer",
                            Password = "password654",
                            TaxIdNumber = "321987654",
                            UserName = "eurogamer_user",
                            phone = "321-987-6540"
                        },
                        new
                        {
                            Id = 6,
                            City = "Minneapolis",
                            Country = "USA",
                            Email = "contact@gameinformer.com",
                            Fax = "789-123-4561",
                            MediaName = "Game Informer",
                            Password = "password987",
                            TaxIdNumber = "789123456",
                            UserName = "gameinformer_user",
                            phone = "789-123-4560"
                        },
                        new
                        {
                            Id = 7,
                            City = "Bath",
                            Country = "UK",
                            Email = "contact@pcgamer.com",
                            Fax = "111-222-3331",
                            MediaName = "PC Gamer",
                            Password = "password111",
                            TaxIdNumber = "111222333",
                            UserName = "pcgamer_user",
                            phone = "111-222-3330"
                        },
                        new
                        {
                            Id = 8,
                            City = "London",
                            Country = "UK",
                            Email = "contact@rockpapershotgun.com",
                            Fax = "222-333-4441",
                            MediaName = "Rock Paper Shotgun",
                            Password = "password222",
                            TaxIdNumber = "222333444",
                            UserName = "rps_user",
                            phone = "222-333-4440"
                        },
                        new
                        {
                            Id = 9,
                            City = "San Francisco",
                            Country = "USA",
                            Email = "contact@destructoid.com",
                            Fax = "333-444-5551",
                            MediaName = "Destructoid",
                            Password = "password333",
                            TaxIdNumber = "333444555",
                            UserName = "destructoid_user",
                            phone = "333-444-5550"
                        },
                        new
                        {
                            Id = 10,
                            City = "San Francisco",
                            Country = "USA",
                            Email = "contact@giantbomb.com",
                            Fax = "444-555-6661",
                            MediaName = "Giant Bomb",
                            Password = "password444",
                            TaxIdNumber = "444555666",
                            UserName = "giantbomb_user",
                            phone = "444-555-6660"
                        },
                        new
                        {
                            Id = 11,
                            City = "New York",
                            Country = "USA",
                            Email = "contact@theverge.com",
                            Fax = "555-666-7771",
                            MediaName = "The Verge",
                            Password = "password555",
                            TaxIdNumber = "555666777",
                            UserName = "theverge_user",
                            phone = "555-666-7770"
                        },
                        new
                        {
                            Id = 12,
                            City = "San Francisco",
                            Country = "USA",
                            Email = "contact@venturebeat.com",
                            Fax = "666-777-8881",
                            MediaName = "VentureBeat",
                            Password = "password666",
                            TaxIdNumber = "666777888",
                            UserName = "venturebeat_user",
                            phone = "666-777-8880"
                        },
                        new
                        {
                            Id = 13,
                            City = "San Francisco",
                            Country = "USA",
                            Email = "contact@techcrunch.com",
                            Fax = "777-888-9991",
                            MediaName = "TechCrunch",
                            Password = "password777",
                            TaxIdNumber = "777888999",
                            UserName = "techcrunch_user",
                            phone = "777-888-9990"
                        },
                        new
                        {
                            Id = 14,
                            City = "New York",
                            Country = "USA",
                            Email = "contact@wired.com",
                            Fax = "888-999-0001",
                            MediaName = "Wired",
                            Password = "password888",
                            TaxIdNumber = "888999000",
                            UserName = "wired_user",
                            phone = "888-999-0000"
                        },
                        new
                        {
                            Id = 15,
                            City = "New York",
                            Country = "USA",
                            Email = "contact@mashable.com",
                            Fax = "999-000-1111",
                            MediaName = "Mashable",
                            Password = "password999",
                            TaxIdNumber = "999000111",
                            UserName = "mashable_user",
                            phone = "999-000-1110"
                        },
                        new
                        {
                            Id = 16,
                            City = "San Francisco",
                            Country = "USA",
                            Email = "contact@cnet.com",
                            Fax = "000-111-2221",
                            MediaName = "CNET",
                            Password = "password000",
                            TaxIdNumber = "000111222",
                            UserName = "cnet_user",
                            phone = "000-111-2220"
                        },
                        new
                        {
                            Id = 17,
                            City = "New York",
                            Country = "USA",
                            Email = "contact@arstechnica.com",
                            Fax = "aaa-111-bbb1",
                            MediaName = "Ars Technica",
                            Password = "passwordaaa",
                            TaxIdNumber = "aaa111bbb",
                            UserName = "arstechnica_user",
                            phone = "aaa-111-bbb0"
                        },
                        new
                        {
                            Id = 18,
                            City = "New York",
                            Country = "USA",
                            Email = "contact@gizmodo.com",
                            Fax = "bbb-222-ccc1",
                            MediaName = "Gizmodo",
                            Password = "passwordbbb",
                            TaxIdNumber = "bbb222ccc",
                            UserName = "gizmodo_user",
                            phone = "bbb-222-ccc0"
                        },
                        new
                        {
                            Id = 19,
                            City = "Portland",
                            Country = "USA",
                            Email = "contact@digitaltrends.com",
                            Fax = "ccc-333-ddd1",
                            MediaName = "Digital Trends",
                            Password = "passwordccc",
                            TaxIdNumber = "ccc333ddd",
                            UserName = "digitaltrends_user",
                            phone = "ccc-333-ddd0"
                        },
                        new
                        {
                            Id = 20,
                            City = "Bath",
                            Country = "UK",
                            Email = "contact@techradar.com",
                            Fax = "ddd-444-eee1",
                            MediaName = "TechRadar",
                            Password = "passwordddd",
                            TaxIdNumber = "ddd444eee",
                            UserName = "techradar_user",
                            phone = "ddd-444-eee0"
                        },
                        new
                        {
                            Id = 21,
                            City = "İstanbul",
                            Country = "Türkiye",
                            Email = "contact@level.com.tr",
                            Fax = "+90-212-123-4568",
                            MediaName = "Level",
                            Password = "level_password",
                            TaxIdNumber = "TR1234567890",
                            UserName = "level_user",
                            phone = "+90-212-123-4567"
                        },
                        new
                        {
                            Id = 22,
                            City = "Ankara",
                            Country = "Türkiye",
                            Email = "contact@oyungezer.com.tr",
                            Fax = "+90-312-987-6544",
                            MediaName = "Oyungezer",
                            Password = "oyungezer_password",
                            TaxIdNumber = "TR0987654321",
                            UserName = "oyungezer_user",
                            phone = "+90-312-987-6543"
                        },
                        new
                        {
                            Id = 23,
                            City = "İstanbul",
                            Country = "Türkiye",
                            Email = "contact@merlininkazani.com",
                            Fax = "+90-212-567-8902",
                            MediaName = "Merlin'in Kazanı",
                            Password = "merlin_password",
                            TaxIdNumber = "TR5678901234",
                            UserName = "merlin_user",
                            phone = "+90-212-567-8901"
                        },
                        new
                        {
                            Id = 24,
                            City = "İzmir",
                            Country = "Türkiye",
                            Email = "contact@turunculevye.com",
                            Fax = "+90-232-345-6790",
                            MediaName = "Turuncu Levye",
                            Password = "turunculevye_password",
                            TaxIdNumber = "TR3456789012",
                            UserName = "turunculevye_user",
                            phone = "+90-232-345-6789"
                        },
                        new
                        {
                            Id = 25,
                            City = "Bursa",
                            Country = "Türkiye",
                            Email = "contact@multiplayer.com.tr",
                            Fax = "+90-224-456-7891",
                            MediaName = "Multiplayer",
                            Password = "multiplayer_password",
                            TaxIdNumber = "TR4567890123",
                            UserName = "multiplayer_user",
                            phone = "+90-224-456-7890"
                        },
                        new
                        {
                            Id = 26,
                            City = "Antalya",
                            Country = "Türkiye",
                            Email = "contact@tamindir.com",
                            Fax = "+90-242-678-9013",
                            MediaName = "Tamindir",
                            Password = "tamindir_password",
                            TaxIdNumber = "TR6789012345",
                            UserName = "tamindir_user",
                            phone = "+90-242-678-9012"
                        },
                        new
                        {
                            Id = 27,
                            City = "İstanbul",
                            Country = "Türkiye",
                            Email = "contact@donanimhaber.com",
                            Fax = "+90-212-789-0124",
                            MediaName = "Donanım Haber",
                            Password = "donanimhaber_password",
                            TaxIdNumber = "TR7890123456",
                            UserName = "donanimhaber_user",
                            phone = "+90-212-789-0123"
                        },
                        new
                        {
                            Id = 28,
                            City = "İstanbul",
                            Country = "Türkiye",
                            Email = "contact@technopat.net",
                            Fax = "+90-212-890-1235",
                            MediaName = "Technopat",
                            Password = "technopat_password",
                            TaxIdNumber = "TR8901234567",
                            UserName = "technopat_user",
                            phone = "+90-212-890-1234"
                        },
                        new
                        {
                            Id = 29,
                            City = "İstanbul",
                            Country = "Türkiye",
                            Email = "contact@shiftdelete.net",
                            Fax = "+90-212-901-2346",
                            MediaName = "ShiftDelete.Net",
                            Password = "shiftdelete_password",
                            TaxIdNumber = "TR9012345678",
                            UserName = "shiftdelete_user",
                            phone = "+90-212-901-2345"
                        },
                        new
                        {
                            Id = 30,
                            City = "İstanbul",
                            Country = "Türkiye",
                            Email = "contact@webtekno.com",
                            Fax = "+90-212-012-3457",
                            MediaName = "Webtekno",
                            Password = "webtekno_password",
                            TaxIdNumber = "TR0123456789",
                            UserName = "webtekno_user",
                            phone = "+90-212-012-3456"
                        });
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.MediaReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MediaId");

                    b.ToTable("MediaReviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Great game with stunning graphics and engaging gameplay.",
                            ItemId = 1,
                            MediaId = 21,
                            Rating = 85
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Interesting storyline but could improve on the controls.",
                            ItemId = 2,
                            MediaId = 22,
                            Rating = 70
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Fantastic multiplayer experience, highly recommended!",
                            ItemId = 3,
                            MediaId = 23,
                            Rating = 95
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Average game, had high expectations but it fell short.",
                            ItemId = 4,
                            MediaId = 24,
                            Rating = 60
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Good game overall, but needs some bug fixes.",
                            ItemId = 5,
                            MediaId = 25,
                            Rating = 75
                        },
                        new
                        {
                            Id = 6,
                            Comment = "Very enjoyable game with lots of content.",
                            ItemId = 6,
                            MediaId = 26,
                            Rating = 80
                        },
                        new
                        {
                            Id = 7,
                            Comment = "One of the best games I've played this year!",
                            ItemId = 7,
                            MediaId = 27,
                            Rating = 90
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Decent game but lacks depth in some areas.",
                            ItemId = 8,
                            MediaId = 28,
                            Rating = 65
                        },
                        new
                        {
                            Id = 9,
                            Comment = "Solid game with good mechanics and storyline.",
                            ItemId = 9,
                            MediaId = 29,
                            Rating = 78
                        },
                        new
                        {
                            Id = 10,
                            Comment = "Great game, would recommend to all RPG fans.",
                            ItemId = 10,
                            MediaId = 30,
                            Rating = 88
                        });
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte?>("Logo")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("PlatformName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("PlatformName")
                        .IsUnique();

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PlatformName = "PlayStation 5"
                        },
                        new
                        {
                            Id = 2,
                            PlatformName = "Xbox Series X"
                        },
                        new
                        {
                            Id = 3,
                            PlatformName = "Nintendo Switch"
                        },
                        new
                        {
                            Id = 4,
                            PlatformName = "PlayStation 4"
                        },
                        new
                        {
                            Id = 5,
                            PlatformName = "Xbox One"
                        },
                        new
                        {
                            Id = 6,
                            PlatformName = "PC"
                        },
                        new
                        {
                            Id = 7,
                            PlatformName = "PlayStation Vita"
                        },
                        new
                        {
                            Id = 8,
                            PlatformName = "Nintendo 3DS"
                        },
                        new
                        {
                            Id = 9,
                            PlatformName = "Stadia"
                        },
                        new
                        {
                            Id = 10,
                            PlatformName = "Oculus Quest 2"
                        },
                        new
                        {
                            Id = 11,
                            PlatformName = "Nintendo Wii U"
                        },
                        new
                        {
                            Id = 12,
                            PlatformName = "PlayStation 3"
                        },
                        new
                        {
                            Id = 13,
                            PlatformName = "Xbox 360"
                        },
                        new
                        {
                            Id = 14,
                            PlatformName = "Nintendo Wii"
                        },
                        new
                        {
                            Id = 15,
                            PlatformName = "PlayStation Portable (PSP)"
                        },
                        new
                        {
                            Id = 16,
                            PlatformName = "Game Boy Advance"
                        },
                        new
                        {
                            Id = 17,
                            PlatformName = "Sega Dreamcast"
                        },
                        new
                        {
                            Id = 18,
                            PlatformName = "Super Nintendo Entertainment System (SNES)"
                        },
                        new
                        {
                            Id = 19,
                            PlatformName = "Sega Genesis"
                        },
                        new
                        {
                            Id = 20,
                            PlatformName = "Atari 2600"
                        },
                        new
                        {
                            Id = 21,
                            PlatformName = "PlayStation 2"
                        },
                        new
                        {
                            Id = 22,
                            PlatformName = "PlayStation 1"
                        });
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.UserReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("varchar(800)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("UserReviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.MetaUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("MetaUser");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4a7ff6f-2000-44ea-8b82-9c191c2f87c1",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFj6FZQ6ew2o4PjB5HbjZc2P6A0EHkD3OXizZrj0LxG8B8el1omRZcU/lY8qdJWpWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "JZTQQKJ3CQCXYN4AWFLARBLI4NXY2FYW",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.ItemCategory", b =>
                {
                    b.HasOne("HightScore.Entities.Model.Concrete.Category", "category")
                        .WithMany("ItemCategories")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HightScore.Entities.Model.Concrete.Item", "items")
                        .WithMany("ItemCategories")
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("items");
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.ItemPlatform", b =>
                {
                    b.HasOne("HightScore.Entities.Model.Concrete.Item", "Item")
                        .WithMany("ItemPlatforms")
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HightScore.Entities.Model.Concrete.Platform", "platform")
                        .WithMany("ItemPlatforms")
                        .HasForeignKey("platformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("platform");
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.MediaReview", b =>
                {
                    b.HasOne("HightScore.Entities.Model.Concrete.Item", "ItemsId")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HightScore.Entities.Model.Concrete.Media", "mediaId")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemsId");

                    b.Navigation("mediaId");
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.UserReview", b =>
                {
                    b.HasOne("HightScore.Entities.Model.Concrete.Item", "itemId")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("itemId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.Category", b =>
                {
                    b.Navigation("ItemCategories");
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.Item", b =>
                {
                    b.Navigation("ItemCategories");

                    b.Navigation("ItemPlatforms");
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.Platform", b =>
                {
                    b.Navigation("ItemPlatforms");
                });
#pragma warning restore 612, 618
        }
    }
}
