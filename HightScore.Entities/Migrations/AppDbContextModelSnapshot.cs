// <auto-generated />
using System;
using HightScore.Entities.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HightScore.Entities.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CategoryItem", b =>
                {
                    b.Property<int>("CategroiesId")
                        .HasColumnType("int");

                    b.Property<int>("itemsId")
                        .HasColumnType("int");

                    b.HasKey("CategroiesId", "itemsId");

                    b.HasIndex("itemsId");

                    b.ToTable("CategoryItem");
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.AdminAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("adminIdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("adminIdId");

                    b.ToTable("AdminActions");
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryDescription = "Games that emphasize physical challenges, including hand-eye coordination and reaction-time.",
                            CategoryName = "Action",
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 287, DateTimeKind.Local).AddTicks(4010)
                        },
                        new
                        {
                            Id = 2,
                            CategoryDescription = "Games focused on story-driven gameplay and exploration of a virtual world.",
                            CategoryName = "Adventure",
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 287, DateTimeKind.Local).AddTicks(4023)
                        },
                        new
                        {
                            Id = 3,
                            CategoryDescription = "Games where players assume the roles of characters in a fictional setting and take control over many of those characters' actions.",
                            CategoryName = "Role-Playing (RPG)",
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 287, DateTimeKind.Local).AddTicks(4025)
                        },
                        new
                        {
                            Id = 4,
                            CategoryDescription = "Games designed to simulate real-world activities and scenarios as closely as possible.",
                            CategoryName = "Simulation",
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 287, DateTimeKind.Local).AddTicks(4026)
                        },
                        new
                        {
                            Id = 5,
                            CategoryDescription = "Games that focus on careful planning and skillful thinking to achieve victory.",
                            CategoryName = "Strategy",
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 287, DateTimeKind.Local).AddTicks(4027)
                        },
                        new
                        {
                            Id = 6,
                            CategoryDescription = "Games that simulate the practice of sports, including team sports, track and field, and extreme sports.",
                            CategoryName = "Sports",
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 287, DateTimeKind.Local).AddTicks(4028)
                        },
                        new
                        {
                            Id = 7,
                            CategoryDescription = "Games that emphasize solving puzzles as the main gameplay element.",
                            CategoryName = "Puzzle",
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 287, DateTimeKind.Local).AddTicks(4029)
                        },
                        new
                        {
                            Id = 8,
                            CategoryDescription = "Games designed to scare the player, often through a combination of atmosphere, storytelling, and shock elements.",
                            CategoryName = "Horror",
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 287, DateTimeKind.Local).AddTicks(4030)
                        },
                        new
                        {
                            Id = 9,
                            CategoryDescription = "Games where the primary objective is to race against opponents or the clock.",
                            CategoryName = "Racing",
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 287, DateTimeKind.Local).AddTicks(4031)
                        },
                        new
                        {
                            Id = 10,
                            CategoryDescription = "Games that support large numbers of players interacting with each other in a persistent virtual world.",
                            CategoryName = "MMO (Massively Multiplayer Online)",
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 287, DateTimeKind.Local).AddTicks(4032)
                        });
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("varchar(800)");

                    b.Property<decimal>("MediaAverageRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RelaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("UserAverageRating")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("Fax")
                        .HasColumnType("longtext");

                    b.Property<byte?>("MediaLogo")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("MediaName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TaxIdNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MediaName")
                        .IsUnique();

                    b.HasIndex("TaxIdNumber")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("phone")
                        .IsUnique();

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.MediaReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MediaId");

                    b.ToTable("MediaReviews");
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte?>("Logo")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("PlatformName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("PlatformName")
                        .IsUnique();

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7076),
                            PlatformName = "PlayStation 5"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7081),
                            PlatformName = "Xbox Series X"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7082),
                            PlatformName = "Nintendo Switch"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7083),
                            PlatformName = "PlayStation 4"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7084),
                            PlatformName = "Xbox One"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7085),
                            PlatformName = "PC"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7086),
                            PlatformName = "PlayStation Vita"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7088),
                            PlatformName = "Nintendo 3DS"
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7131),
                            PlatformName = "Stadia"
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7132),
                            PlatformName = "Oculus Quest 2"
                        },
                        new
                        {
                            Id = 11,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7133),
                            PlatformName = "Nintendo Wii U"
                        },
                        new
                        {
                            Id = 12,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7134),
                            PlatformName = "PlayStation 3"
                        },
                        new
                        {
                            Id = 13,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7135),
                            PlatformName = "Xbox 360"
                        },
                        new
                        {
                            Id = 14,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7136),
                            PlatformName = "Nintendo Wii"
                        },
                        new
                        {
                            Id = 15,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7137),
                            PlatformName = "PlayStation Portable (PSP)"
                        },
                        new
                        {
                            Id = 16,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7138),
                            PlatformName = "Game Boy Advance"
                        },
                        new
                        {
                            Id = 17,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7139),
                            PlatformName = "Sega Dreamcast"
                        },
                        new
                        {
                            Id = 18,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7140),
                            PlatformName = "Super Nintendo Entertainment System (SNES)"
                        },
                        new
                        {
                            Id = 19,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7141),
                            PlatformName = "Sega Genesis"
                        },
                        new
                        {
                            Id = 20,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7142),
                            PlatformName = "Atari 2600"
                        },
                        new
                        {
                            Id = 21,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7143),
                            PlatformName = "PlayStation 2"
                        },
                        new
                        {
                            Id = 22,
                            CreatedTime = new DateTime(2024, 7, 7, 22, 41, 54, 288, DateTimeKind.Local).AddTicks(7144),
                            PlatformName = "PlayStation 1"
                        });
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NickName")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.UserReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("UserReviews");
                });

            modelBuilder.Entity("ItemPlatform", b =>
                {
                    b.Property<int>("PlatformsId")
                        .HasColumnType("int");

                    b.Property<int>("itemsId")
                        .HasColumnType("int");

                    b.HasKey("PlatformsId", "itemsId");

                    b.HasIndex("itemsId");

                    b.ToTable("ItemPlatform");
                });

            modelBuilder.Entity("CategoryItem", b =>
                {
                    b.HasOne("HightScore.Entities.Model.Concrete.Category", null)
                        .WithMany()
                        .HasForeignKey("CategroiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HightScore.Entities.Model.Concrete.Item", null)
                        .WithMany()
                        .HasForeignKey("itemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.AdminAction", b =>
                {
                    b.HasOne("HightScore.Entities.Model.Concrete.User", "adminId")
                        .WithMany()
                        .HasForeignKey("adminIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("adminId");
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.MediaReview", b =>
                {
                    b.HasOne("HightScore.Entities.Model.Concrete.Item", "ItemsId")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HightScore.Entities.Model.Concrete.Media", "mediaId")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemsId");

                    b.Navigation("mediaId");
                });

            modelBuilder.Entity("HightScore.Entities.Model.Concrete.UserReview", b =>
                {
                    b.HasOne("HightScore.Entities.Model.Concrete.Item", "itemId")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HightScore.Entities.Model.Concrete.User", "userId")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("itemId");

                    b.Navigation("userId");
                });

            modelBuilder.Entity("ItemPlatform", b =>
                {
                    b.HasOne("HightScore.Entities.Model.Concrete.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HightScore.Entities.Model.Concrete.Item", null)
                        .WithMany()
                        .HasForeignKey("itemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
