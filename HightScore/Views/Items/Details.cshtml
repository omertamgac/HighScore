@using System.Security.Claims
@model GameVM

@{
    ViewData["Title"] = Model.Title;
   
    var ratingColor = Model.AverageRating < 50 ? "#dc3545" :
                      Model.AverageRating < 70 ? "#ffc107" : "#28a745";
}

<style>
    .rating-box {
        font-size: 4rem; 
        font-weight: bold;
        color: #fff;
        background-color: @ratingColor;
        padding: 5px 10px; 
        border-radius: 10px;
        display: inline-block;
        width: 150px; 
        text-align: center;
        margin-bottom: 20px;
    }
</style>
<link href="~/css/Details.css" rel="stylesheet" type="text/css" />

<div class="container mt-4">
    <div class="detail-container">
        <div class="game-image">
            <img src="/images/@Model.photo" alt="@Model.Title" class="img-fluid" />
            <div class="game-details mt-4">
                <h4>Categories</h4>
                <ul>
                    @foreach (var category in Model.Categories)
                    {
                        <li>@category</li>
                    }
                </ul>

                <h4>Platforms</h4>
                <ul>
                    @foreach (var platform in Model.Platforms)
                    {
                        <li>@platform</li>
                    }
                </ul>
            </div>
        </div>
        <div class="game-info">
            <h1>@Model.Title</h1>
            <div class="rating-box">@Model.AverageRating</div>
            <div class="iframe-container">
                @if (Model.Iframe != null)
                {
                    @Html.Raw(Model.Iframe)
                }
            </div>
            <p class="game-description">@Model.Description</p>
            <p class="game-description"><strong>Release Date:</strong> @Model.RelaseDate.ToShortDateString()</p>
        </div>
    </div>

    @if (User.IsInRole("User"))
    {
        <div class="add-review-container">
            <h4>Add a Review</h4>
            <form asp-action="CreateComment" method="post">
                <div class="form-group">
                    <label for="comment">Comment:</label>
                    <textarea class="form-control" id="comment" name="comment" rows="3" required></textarea>
                </div>
                <div class="form-group">
                    <label for="rating">Rating (1-100):</label>
                    <input type="number" class="form-control" id="rating" name="rating" min="1" max="100" required />
                </div>
                <input type="hidden" name="itemId" value="@Model.ItemId" />
                <button type="submit" class="btn btn-success mt-2">Submit</button>
            </form>
        </div>
    }

 <div class="user-reviews">
    <h4>Reviews</h4>
    @if (Model.UserReviews != null && Model.UserReviews.Count > 0)
    {
        @foreach (var review in Model.UserReviews)
        {
            var UserRatingColor = review.UserRating < 50 ? "#dc3545" :
            review.UserRating < 70 ? "#ffc107" : "#28a745";

            <div class="review-card">
                <input type="hidden" class="item-id" value="@Model.ItemId" />
                <div class="review-rating">
                    <strong>Rating : </strong> <span style="color:@UserRatingColor" class="rating-value">@review.UserRating</span>
                </div>
                <div class="review-comment">
                    <p><strong style="font-size:18px;">@review.user.UserName</strong> : <span class="comment-value">@review.Comment</span></p>
                </div>

                @if (review.UserId == User.FindFirstValue(ClaimTypes.NameIdentifier))
                {
                    <form asp-action="DeleteReview" method="post" class="d-inline">
                        <input type="hidden" name="itemId" value="@Model.ItemId" />
                        <input type="hidden" name="userId" value="@review.UserId" />
                        <button type="submit" class="btn btn-danger">Delete</button>
                    </form>
                    <button class="btn btn-warning edit-button">Edit</button>
                    <textarea class="form-control edit-comment d-none" rows="3">@review.Comment</textarea>
                    <input type="number" class="form-control edit-rating d-none" min="1" max="100" value="@review.UserRating" />
                    <button class="btn btn-success save-button d-none">Save</button>
                    <button class="btn btn-secondary cancel-button d-none">Cancel</button>
                }

                @if (User.IsInRole("Admin"))
                {
                    <form asp-action="DeleteReview" method="post" class="d-inline">
                        <input type="hidden" name="itemId" value="@Model.ItemId" />
                        <input type="hidden" name="userId" value="@review.UserId" />
                        <button type="submit" class="btn btn-danger">Delete</button>
                    </form>
                }
            </div>
        }

        <div class="pagination mt-4">
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <a asp-action="Details" asp-route-id="@Model.ItemId" asp-route-pageNumber="@i" class="btn @(i == Model.CurrentPage ? "btn-success" : "btn-secondary")">
                    @i
                </a>
            }
        </div>
    }
    else
    {
        <p style="color:white;">There are no reviews yet.</p>
    }
</div>



</div>


<script>

 document.addEventListener('DOMContentLoaded', function () {
        const paginationLinks = document.querySelectorAll('.pagination a');

        paginationLinks.forEach(link => {
            link.addEventListener('click', function (event) {
                event.preventDefault(); // Varsayılan bağlantı davranışını engelle

                const targetUrl = this.href; // Hedef URL'yi al
                const scrollPosition = window.scrollY; // Mevcut kaydırma konumunu al

                // AJAX isteği ile yeni içeriği yükleyin
                fetch(targetUrl, {
                    headers: {
                        'RequestVerificationToken': '@Html.AntiForgeryToken()'
                    }
                })
                .then(response => response.text())
                .then(data => {
                    // Yüklenen yeni içeriği sayfaya ekleyin
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(data, 'text/html');
                    const newReviewsHtml = doc.querySelector('.user-reviews').innerHTML;
                    
                    // Yorumlar kısmını güncelle
                    document.querySelector('.user-reviews').innerHTML = newReviewsHtml;

                    // Mevcut kaydırma konumunu geri yükleyin
                    window.scrollTo(0, scrollPosition);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            });
        });
    });




    document.addEventListener('DOMContentLoaded', function () {
        // Edit butonuna tıklanıldığında
        document.querySelectorAll('.edit-button').forEach(button => {
            button.addEventListener('click', function () {
                let cardBody = this.closest('.review-card');
                cardBody.querySelector('.review-rating').classList.add('d-none');
                cardBody.querySelector('.edit-rating').classList.remove('d-none');
                cardBody.querySelector('.review-comment').classList.add('d-none');
                cardBody.querySelector('.edit-comment').classList.remove('d-none');
                this.classList.add('d-none');
                cardBody.querySelector('.save-button').classList.remove('d-none');
                cardBody.querySelector('.cancel-button').classList.remove('d-none');
            });
        });

        // Save butonuna tıklanıldığında
        document.querySelectorAll('.save-button').forEach(button => {
            button.addEventListener('click', function () {
                let cardBody = this.closest('.review-card');
                let itemId = cardBody.querySelector('.item-id').value;
                let newRating = cardBody.querySelector('.edit-rating').value;
                let newComment = cardBody.querySelector('.edit-comment').value;

                // Puanın 100'den büyük olmadığını kontrol et
                if (newRating > 100) {
                    alert('Rating cannot be more than 100.');
                    return;
                }

                // AJAX isteği
                fetch('@Url.Action("EditReview", "Items")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': '@Html.AntiForgeryToken()'
                    },
                    body: JSON.stringify({
                        ItemId: itemId,
                        UserRating: newRating,
                        Comment: newComment
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            location.reload(); // Sayfayı yenile
                        } else {
                            alert(data.message || 'Error updating review.');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('There was an error processing your request.');
                    });
            });
        });

        // Delete butonuna tıklanıldığında
        document.querySelectorAll('.delete-button').forEach(button => {
            button.addEventListener('click', function () {
                let cardBody = this.closest('.review-card');
                let itemId = cardBody.querySelector('.item-id').value;

                // Silme işlemi için AJAX isteği
                fetch('@Url.Action("DeleteReview", "Items")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': '@Html.AntiForgeryToken()'
                    },
                    body: JSON.stringify({
                        ItemId: itemId
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            location.reload(); // Sayfayı yenile
                        } else {
                            alert(data.message || 'Error deleting review.');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('There was an error processing your request.');
                    });
            });
        });

        // Cancel butonuna tıklanıldığında
        document.querySelectorAll('.cancel-button').forEach(button => {
            button.addEventListener('click', function () {
                let cardBody = this.closest('.review-card');
                cardBody.querySelector('.review-rating').classList.remove('d-none');
                cardBody.querySelector('.edit-rating').classList.add('d-none');
                cardBody.querySelector('.review-comment').classList.remove('d-none');
                cardBody.querySelector('.edit-comment').classList.add('d-none');
                this.classList.add('d-none');
                cardBody.querySelector('.save-button').classList.add('d-none');
                cardBody.querySelector('.edit-button').classList.remove('d-none');
            });
        });
    });
</script>
