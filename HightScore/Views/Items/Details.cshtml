@using System.Security.Claims
@model GameVM

@{
    ViewData["Title"] = Model.Title;
}

<style>
    .detail-container {
        display: flex;
        flex-direction: row;
        margin-top: 20px;
    }

    .game-image {
        flex: 1;
        max-width: 100%;
        margin-right: 20px;
    }

    .game-info {
        flex: 2;
    }

    .rating {
        font-size: 2rem;
        font-weight: bold;
        color: #28a745; /* Yeşil */
        margin-bottom: 20px;
    }

    .game-description, .game-details {
        margin-bottom: 20px;
    }

    .user-reviews {
        margin-top: 20px;
    }

    .review-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        position: relative;
    }

    .review-card:hover {
        background-color: #f9f9f9;
    }

    .review-card .review-rating {
        font-size: 1.25rem;
        color: #28a745;
    }

    .review-card .review-comment {
        margin-top: 10px;
    }

    .edit-button, .save-button, .cancel-button {
        margin-right: 5px;
    }

    .edit-button, .save-button, .cancel-button {
        cursor: pointer;
    }
</style>

<div class="container mt-4">
    <div class="detail-container">
        <div class="game-image">
            <img src="/images/@Model.photo" alt="@Model.Title" class="img-fluid" />
        </div>
        <div class="game-info">
            <h1>@Model.Title</h1>
            <div class="rating">Average Rating: @Model.AverageRating</div>
            <p>@Model.Description</p>
            <p><strong>Release Date:</strong> @Model.RelaseDate.ToShortDateString()</p>
            @if (Model.Iframe != null)
            {
                <div>
                    @Html.Raw(Model.Iframe)
                </div>
            }
            <div class="game-details">
                <h4>Categories</h4>
                <ul>
                    @foreach (var category in Model.Categories)
                    {
                        <li>@category</li>
                    }
                </ul>

                <h4>Platforms</h4>
                <ul>
                    @foreach (var platform in Model.Platforms)
                    {
                        <li>@platform</li>
                    }
                </ul>
            </div>
        </div>
    </div>

    @if (User.IsInRole("User"))
    {
        <div class="row mt-4">
            <div class="col-md-8">
                <h4>Add a Review</h4>
                <form asp-action="CreateComment" method="post">
                    <div class="form-group">
                        <label for="comment">Comment:</label>
                        <textarea class="form-control" id="comment" name="comment" rows="3" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="rating">Rating (1-100):</label>
                        <input type="number" class="form-control" id="rating" name="rating" min="1" max="100" required />
                    </div>
                    <input type="hidden" name="itemId" value="@Model.ItemId" />
                    <button type="submit" class="btn btn-primary mt-2">Submit</button>
                </form>
            </div>
        </div>
    }

    <div class="user-reviews mt-4">
        <h4>User Reviews</h4>
        @if (Model.UserReviews != null && Model.UserReviews.Count > 0)
        {
            @foreach (var review in Model.UserReviews)
            {
                <div class="review-card">
                    <div class="review-rating">
                        <strong>Rating:</strong> @review.UserRating
                    </div>
                    <div class="review-comment">
                        <p><strong>@review.user.UserName</strong>: @review.Comment</p>
                    </div>

                    @if (User.IsInRole("Admin") || review.UserId == User.FindFirstValue(ClaimTypes.NameIdentifier))
                    {
                        @if (User.IsInRole("Admin"))
                        {
                            <form asp-action="DeleteReview" method="post" class="d-inline">
                                <input type="hidden" name="itemId" value="@Model.ItemId" />
                                <input type="hidden" name="userId" value="@review.user.Id" />
                                <button type="submit" class="btn btn-danger">Delete</button>
                            </form>
                        }
                        else
                        {
                            <button class="btn btn-warning edit-button">Edit</button>
                            <button class="btn btn-success save-button d-none">Save</button>
                            <button class="btn btn-secondary cancel-button d-none">Cancel</button>
                            <form asp-action="DeleteReview" method="post" class="d-inline">
                                <input type="hidden" name="itemId" value="@Model.ItemId" />
                                <input type="hidden" name="userId" value="@review.UserId" />
                                <button type="submit" class="btn btn-danger">Delete</button>
                            </form>
                        }
                    }
                </div>
            }
        }
        else
        {
            <p>There are no reviews yet.</p>
        }
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Edit butonuna tıklanıldığında
        document.querySelectorAll('.edit-button').forEach(button => {
            button.addEventListener('click', function () {
                let cardBody = this.closest('.review-card');
                cardBody.querySelector('.review-rating').classList.add('d-none');
                cardBody.querySelector('.edit-rating').classList.remove('d-none');
                cardBody.querySelector('.review-comment').classList.add('d-none');
                cardBody.querySelector('.edit-comment').classList.remove('d-none');
                this.classList.add('d-none');
                cardBody.querySelector('.save-button').classList.remove('d-none');
                cardBody.querySelector('.cancel-button').classList.remove('d-none');
            });
        });

        // Save butonuna tıklanıldığında
        document.querySelectorAll('.save-button').forEach(button => {
            button.addEventListener('click', function () {
                let cardBody = this.closest('.review-card');
                let itemId = @Model.ItemId;
                let userId = '@User.FindFirstValue(ClaimTypes.NameIdentifier)';
                let newRating = cardBody.querySelector('.edit-rating').value;
                let newComment = cardBody.querySelector('.edit-comment').value;

                // Puanın 100'den büyük olmadığını kontrol edin
                if (newRating > 100) {
                    alert('Rating cannot be more than 100.');
                    return; // İşlemi durdur
                }

                // AJAX isteği
                fetch('@Url.Action("EditReview", "Items")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': '@Html.AntiForgeryToken()'
                    },
                    body: JSON.stringify({
                        ItemId: itemId,
                        UserId: userId,
                        UserRating: newRating,
                        Comment: newComment
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Başarılı olursa yeni değerleri göster
                            cardBody.querySelector('.review-rating').textContent = newRating;
                            cardBody.querySelector('.review-comment').textContent = newComment;
                            cardBody.querySelector('.review-rating').classList.remove('d-none');
                            cardBody.querySelector('.edit-rating').classList.add('d-none');
                            cardBody.querySelector('.review-comment').classList.remove('d-none');
                            cardBody.querySelector('.edit-comment').classList.add('d-none');
                            this.classList.add('d-none');
                            cardBody.querySelector('.edit-button').classList.remove('d-none');
                            cardBody.querySelector('.cancel-button').classList.add('d-none');
                        } else {
                            alert(data.message || 'Error updating review.');
                        }
                    });

            });
        });

        // Cancel butonuna tıklanıldığında
        document.querySelectorAll('.cancel-button').forEach(button => {
            button.addEventListener('click', function () {
                let cardBody = this.closest('.review-card');
                cardBody.querySelector('.review-rating').classList.remove('d-none');
                cardBody.querySelector('.edit-rating').classList.add('d-none');
                cardBody.querySelector('.review-comment').classList.remove('d-none');
                cardBody.querySelector('.edit-comment').classList.add('d-none');
                this.classList.add('d-none');
                cardBody.querySelector('.save-button').classList.add('d-none');
                cardBody.querySelector('.edit-button').classList.remove('d-none');
            });
        });
    });
</script>
